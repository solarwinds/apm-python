# Â© 2023 SolarWinds Worldwide, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at:http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.

name: Publish APM Python lambda layer

on:
    workflow_dispatch:
        inputs:
            architecture:
                description: '(optional) amd64 or arm64'
                required: false
                type: string
            runtimes:
                description: '(optional) a space delimited list of compatible runtimes (from https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html)'
                required: false
                type: string

jobs:
  build_layer_x86_64:
    runs-on: ubuntu-latest
    outputs:
      PYTHON_SDK_VERSION: ${{ steps.save-python-sdk-version.outputs.PYTHON_SDK_VERSION }}
    steps:
    - uses: actions/checkout@v3
    - uses: ./.github/actions/package_lambda_solarwinds_apm_x86_64
    - name: Save Python SDK Version
      id: save-python-sdk-version
      run: |
        echo "PYTHON_SDK_VERSION=$PYTHON_SDK_VERSION" >> $GITHUB_OUTPUT
    - uses: actions/upload-artifact@v3
      name: Save assembled layer to build
      with:
        name: solarwinds_apm_lambda.zip
        path: dist/solarwinds_apm_lambda.zip

  publish_layer_x86_64:
    runs-on: ubuntu-latest
    needs: build_layer_x86_64
    steps:
    - name: Construct Layer Name
      shell: bash
      run: |
        LAYER_NAME=solarwinds-apm-python
        
        if [[ -n "${{ inputs.architecture }}" ]]; then
            LAYER_NAME=$LAYER_NAME-${{ inputs.architecture }}
            ARCH=$(echo "${{ inputs.architecture }}" | sed -r 's/amd64/x86_64/g')
        else
            ARCH="x86_64 arm64"
        fi
        echo "ARCH=$ARCH" >> $GITHUB_ENV
        
        if [[ -n "${{ inputs.runtimes }}" ]]; then
            RUNTIMES="--compatible-runtimes ${{ inputs.runtimes }}"
        fi
        echo "RUNTIMES=$RUNTIMES" >> $GITHUB_ENV
        
        if [[ "prod" != "prod" ]]; then
            LAYER_NAME=$LAYER_NAME-prod
        fi
        
        LAYER_VERSION=$(echo "$GITHUB_REF_NAME" | sed -r 's/.*\/[^0-9\.]*//g')
        LAYER_VERSION_CLEANED=$(echo "$LAYER_VERSION" | sed -r 's/\./_/g')
        
        LAYER_NAME=$LAYER_NAME-$LAYER_VERSION_CLEANED
        echo "LAYER_NAME=$LAYER_NAME" >> $GITHUB_ENV
        
        echo GITHUB_ENV:
        cat $GITHUB_ENV

    - name: Download built layer
      uses: actions/download-artifact@v3
      with:
        name: solarwinds_apm_lambda.zip

    - uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.PROD_LAMBDA_ROLE_ARN }}
        role-duration-seconds: 1200
        aws-region: us-east-1
        mask-aws-account-id: false

    - name: Publish Lambda Layer
      run: |
        LAYER_ARN=$(
            aws lambda publish-layer-version \
            --layer-name $LAYER_NAME \
            --license-info "Apache 2.0" \
            --compatible-architectures $ARCH $RUNTIMES \
            --zip-file fileb://solarwinds_apm_lambda.zip \
            --query 'LayerVersionArn' \
            --output text
        )
        echo "::notice ::$LAYER_ARN component-version=${{ needs.build_layer_x86_64.outputs.PYTHON_SDK_VERSION }}"
        # echo "* $LAYER_ARN" >> $GITHUB_STEP_SUMMARY

    - name: Make Layer Public
      run: |
        LAYER_VERSION=$(
            aws lambda list-layer-versions \
            --layer-name $LAYER_NAME \
            --query 'max_by(LayerVersions, &Version).Version'
        )
        aws lambda add-layer-version-permission \
            --layer-name $LAYER_NAME \
            --version-number $LAYER_VERSION \
            --principal "*" \
            --statement-id publish \
            --action lambda:GetLayerVersion